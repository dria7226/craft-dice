<craft name="dice">
	<parameter name="numberOfSides" type="int" default="21"/>
	<script type="text/openjscad">
	function main(params)
    {
        //vars
	    var sides = params.numberOfSides || 7;
	    if(sides < 1) sides = 6;
	    //-------------------
	    
	    var c = cube({size : 2 , center : true});
	    
	    if(sides == 1)
	    {
	    var rect = CSG.Polygon.createFromPoints([
	        [0, 0, 0],
	        [1, 0, 0],
	        [1, 10, 0],
	        [0, 10, 0]
	    ]);

	    var angle = 5;
	    c = rect.solidFromSlices({
	      numslices: 365 / angle,
	      callback: function(t, slice) {
	         return this.rotateZ(2.5 * slice).translate([t,10*t,0]).rotate(
	            [0,30,0],
	            [-1, 0, 0],
	            angle * slice
	         );
	      }
	   });
	   
	   c = c.rotateY(90).center(true).translate([0,0,5]);
	   
	   c = difference(c,sphere().translate([ 25,0,4]));
	   c = difference(c,sphere().translate([-25,0,3]));
	   
	   c = c.scale(0.2/3);
	   
	   return c;
	}
    
    if(sides == 2)
    {
        c = difference(cylinder({'h' : 2 , center : true}),cube({size : [2,1,2] , center : [false,false,true]}).translate([-1,0,0]));
        c = union(c,c.rotateY(90).mirroredY());
        
        //carve the numbers
        var no_1 = sphere({'r' : 0.1 , 'fn' : 16}).translate([1,0.5,0]);
        
        var no_2 = no_1.rotateY(90);
        no_2 = no_2.translate([0.15,-1,0]);
        no_2 = union(no_2,no_2.mirroredX());
        
        no_1 = union(no_1,no_1.mirroredX());
        no_2 = union(no_2,no_2.mirroredZ());
        
        c = difference(c , no_1);
        c = difference(c , no_2);
        
        return c;
    }
    
    if(sides == 6)
    {   
        //carve the numbers
        var a_sphere = sphere({'r' : 0.2 , 'fn' : 16}).translate([0,0,1]);
        
        var a_face = cylinder({'r1':0, 'r2':Math.sqrt(2), 'h' : 1, 'fn' : 4}).rotateZ(45);

        //1
        var oneFace;
        oneFace = difference(a_face , a_sphere);
        
        //2
        var twoFace;
        twoFace = difference(a_face  , a_sphere.translate([-0.5,-0.5, 0]));
        twoFace = difference(twoFace , a_sphere.translate([ 0.5, 0.5, 0]));

        twoFace = twoFace.rotateY(90);
        
        //3
        var threeFace;
        threeFace = difference(a_face    , a_sphere.translate([-0.5,-0.5,0]));
        threeFace = difference(threeFace , a_sphere);
        threeFace = difference(threeFace , a_sphere.translate([ 0.5, 0.5,0]));

        threeFace = threeFace.rotateX(-90);
        
        //4
        var fourFace;
        fourFace = difference(a_face   , a_sphere.translate([-0.5, 0.5,0]));
        fourFace = difference(fourFace , a_sphere.translate([-0.5,-0.5,0]));
        fourFace = difference(fourFace , a_sphere.translate([ 0.5, 0.5,0]));
        fourFace = difference(fourFace , a_sphere.translate([ 0.5,-0.5,0]));

        fourFace = fourFace.rotateX(90);
        
        //5
        var fiveFace;
        fiveFace = difference(a_face   , a_sphere);
        fiveFace = difference(fiveFace , a_sphere.translate([-0.5, 0.5,0]));
        fiveFace = difference(fiveFace , a_sphere.translate([-0.5,-0.5,0]));
        fiveFace = difference(fiveFace , a_sphere.translate([ 0.5, 0.5,0]));
        fiveFace = difference(fiveFace , a_sphere.translate([ 0.5,-0.5,0]));

        fiveFace = fiveFace.rotateY(-90);
        
        //6
        var sixFace;
        sixFace = difference(a_face  , a_sphere.translate([-0.5,-0.5,0]));
        sixFace = difference(sixFace , a_sphere.translate([-0.5,   0,0]));
        sixFace = difference(sixFace , a_sphere.translate([-0.5, 0.5,0]));
        
        sixFace = difference(sixFace , a_sphere.translate([ 0.5,-0.5,0]));
       	sixFace = difference(sixFace , a_sphere.translate([ 0.5,   0,0]));
        sixFace = difference(sixFace , a_sphere.translate([ 0.5, 0.5,0]));

        sixFace = sixFace.rotateY(180);
        
        return union(oneFace,twoFace,threeFace,fourFace,fiveFace,sixFace);
    }
    
    return spinnerDie(sides);
	}

	function spinnerDie(sides)
	{ 
	    //tabletop spinner

	    var side_width = 2*Math.PI/sides;
	    var side_height = side_width*(sides>5) + 0.3*(sides<=5);
	        
	    //helper function
	    var cut_number_in_face = function(face, number)
	    {
	    	//create number
	        var l = vector_text(0,0,''+number);   // l contains a list of polylines to be drawn
	        var o = [];
	        l.forEach(function(pl) {                   // pl = polyline (not closed)
	        o.push(rectangular_extrude(pl, {w: 3, h: 6}));   // extrude it to 3D
	        });
	        var num = union(o);
	        
	         //a 1-digit num normally exceeds a 2x2 area by
	        //a bit, this is to make it fit in 2x2
	        num = num.scale(0.8);
	        //scale depending on no of digits
	        num = num.scale(1/(''+sides).length);
	        //make it stay upright
	        num = num.rotateX(90);
	        //make it face the right direction and center it
	        num = num.rotateZ(90+(number - 1/2)*(360/sides));
	        num = num.center(true);
	        //scale it according to side height
	        num = num.scale(side_height*0.04);
	        //place it properly
	        num = num.translate([Math.cos((number-1/2)*(2*Math.PI/sides))*Math.cos(Math.PI/sides),Math.sin((number-1/2)*(2*Math.PI/sides))*Math.cos(Math.PI/sides),0]);
	        
	        //difference it
	        return difference(face,num);

	    }
        
	    //create faces
	    var faces = [];
        
        var face = polyhedron({	points:[[0,0,1],
    									[0,0,-1],
    									[Math.cos(2*Math.PI/sides),Math.sin(2*Math.PI/sides),side_height/2],
    									[1,0,side_height/2],
    									[Math.cos(2*Math.PI/sides),Math.sin(2*Math.PI/sides),-side_height/2],
    									[1,0,-side_height/2]],
    							
			    				triangles: [/*top triangle   */[0,2,3],
			    							/*face           */[2,5,3],
			    											   [5,2,4],
			    							/*bottom triangle*/[1,5,4],
                                            /*left side*/      [0,3,1],
                                                               [5,1,3],
                                            /*right side*/     [1,2,0],
                                                               [2,1,4]]
    							});

	    for(var i = 0; i < sides; i++)
	    {
	   		faces[faces.length] = cut_number_in_face(face.rotateZ(i*360/sides),i+1);
	    }
	             
	    return union(faces);
	}

	</script>
</craft>